<#@ template language="C#" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Web" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>

<# 
	var types = _typesInfo.Types;

	foreach (var type in types)
	{
		var samples = _sampleDataBuilder.CreateAllSampleInstances(type).ToList(); 
		
		for (int i=0; i < samples.Count; i++)
        {
	#>
	test("Deserializing <#=type.Name#>, sample <#=i#>", function() {
		var xml = "<#
			var instance = samples[i];  

			var serializer = new XmlSerializer(type);
			var stringWriter = new StringWriter();
            var escapingWriter = new EscapingTextWriter(stringWriter);
            XmlWriter xmlWriter = XmlWriter.Create(escapingWriter, new XmlWriterSettings { OmitXmlDeclaration = true });			
            serializer.Serialize(xmlWriter, instance);
			
			Write(stringWriter.ToString());
		#>";

		var result = netXmlSerializer.deserialize<#=type.Name#>(xml);
		<#CompareObjectProperties("result", instance, type, types);#>	
	});
<#
        }
	}#>

<#+
	public void CompareObjectProperties(string objectName, object instance, Type type, IEnumerable<Type> allTypes)
	{
		foreach (var property in type.GetProperties())
            {
                object value;
				if (instance != null)
                {
					value = property.GetValue(instance, null);                
                }
				else
				{
					value = null;
                }
                
                var propertyType = property.PropertyType;
                if (propertyType == typeof(string))
                {
                    var jsEncodedString = HttpUtility.JavaScriptStringEncode((string)value);                    
					WriteLine("equal({0}.{1}, {2});", objectName, property.Name, string.Format("\"{0}\"", jsEncodedString));				
                }
                else if (propertyType == typeof(DateTime))
                {
                    var unixTime = (((DateTime)value).ToUniversalTime() - new DateTime(1970, 1, 1)).TotalMilliseconds;
                    var date = string.Format("new Date({0})", Math.Truncate(unixTime));
					WriteLine("deepEqual({0}.{1}, {2});", objectName, property.Name, date);					
                }
				else if (allTypes.Contains(propertyType))
				{
					if (value != null)
                    {
						CompareObjectProperties(string.Format("result.{0}", property.Name), value, propertyType, allTypes);
					}
					else
					{
						WriteLine("equal({0}.{1}, null);", objectName, property.Name);				
                    }
                }
				else
                {
					var collectionType = TypesInfo.TryGetCollectionType(propertyType);					

					if (collectionType != null)
                    {
						var itemType = collectionType.GetGenericArguments().First();
						var items = value as IEnumerable;

						int index = 0;
						foreach(var item in items)						
                        {
							var itemJsAccessor = string.Format("{0}.{1}[{2}]", objectName, property.Name, index);
							CompareObjectProperties(itemJsAccessor, item, itemType, allTypes);
							++index;
						}
					}
					else
                    {
						WriteLine("equal({0}.{1}, {2});", objectName, property.Name, value);					
                    }
                }
            }
	}
#>