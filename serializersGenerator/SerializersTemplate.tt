<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>

<#@ include file="Deserializers\String.tt" #>
<#@ include file="Deserializers\Integer.tt" #>
<#@ include file="Deserializers\Date.tt" #>
<#@ include file="Deserializers\Reference.tt" #>
<#@ include file="Deserializers\Collection.tt" #>

var netXmlSerializer = (function(){
// initialize cross-browser xml parser
    var parseXml = function() {
        if (typeof window.DOMParser != "undefined") {
            return function(xmlStr) {
                return ( new window.DOMParser() ).parseFromString(xmlStr, "text/xml");
            };
        } else if (typeof window.ActiveXObject != "undefined" &&  new window.ActiveXObject("Microsoft.XMLDOM")) {
            return function(xmlStr) {
                var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = "false";
                xmlDoc.loadXML(xmlStr);
                return xmlDoc;
            };
        } else {
            throw new Error("No XML parser found");
        }
    }();
	<# 
		var types = _typesInfo.Types;
			
		foreach (var type in types)
		{#>
	function deserializeNode<#=type.Name#>(node) {				
				var result = {};
			<# foreach (var property in type.GetProperties())
			{
				var propertyType = property.PropertyType;
				if (propertyType == typeof(DateTime))
				{
					DeserializeDate(property.Name);
				}
                else if (propertyType == typeof(int))
                {
					DeserializeInt(property.Name);
				}
				else if (types.Contains(propertyType))
                {
					DeserializeReference(property.Name, propertyType.Name);
				}
                else
                {
					var collectionType = TypesInfo.TryGetCollectionType(propertyType);					

					if (collectionType != null)
                    {
						var itemType = collectionType.GetGenericArguments().First();
						DeserializeCollection(property.Name, itemType.Name);
				    }
					else
					{
						DeserializeString(property.Name);
                    }				
				}
			}#>
			return result;
		}

	<#
	}			
	#>
    return {
		<#
			foreach (var type in types)
		{#>
			deserialize<#=type.Name#>: function(xml) {
						var xmlDoc = parseXml(xml);					
						return deserializeNode<#=type.Name#>(xmlDoc);
					},
		<#
		}			
		#>
	}
})();