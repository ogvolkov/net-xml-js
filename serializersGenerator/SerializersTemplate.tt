<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>

var netXmlSerializer = (function(){
// initialize cross-browser xml parser
    var parseXml = function() {
        if (typeof window.DOMParser != "undefined") {
            return function(xmlStr) {
                return ( new window.DOMParser() ).parseFromString(xmlStr, "text/xml");
            };
        } else if (typeof window.ActiveXObject != "undefined" &&  new window.ActiveXObject("Microsoft.XMLDOM")) {
            return function(xmlStr) {
                var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = "false";
                xmlDoc.loadXML(xmlStr);
                return xmlDoc;
            };
        } else {
            throw new Error("No XML parser found");
        }
    }();
	<# 
		var types = _typesInfo.Types;
			
		foreach (var type in types)
		{#>
	function deserializeNode<#=type.Name#>(node) {				
				var result = {};
			<# foreach (var property in type.GetProperties())
			{
				var propertyType = property.PropertyType;
				if (propertyType == typeof(DateTime))
				{#>
		result.<#=property.Name#> = new Date(Date.parse(node.getElementsByTagName("<#=property.Name#>")[0].textContent));
                <#}
                else if (propertyType == typeof(int))
                {#>                    
        result.<#=property.Name#> = parseInt(node.getElementsByTagName("<#=property.Name#>")[0].textContent);
                <#}
				else if (types.Contains(propertyType))
                {#>
		result.<#=property.Name#> = deserializeNode<#=propertyType.Name#>(node.getElementsByTagName("<#=property.Name#>")[0]);
				<#}
                else
                {
					var collectionType = TypesInfo.TryGetCollectionType(propertyType);					

					if (collectionType != null)
                    {
						var itemType = collectionType.GetGenericArguments().First();
				#>
					result.<#=property.Name#> = [];
					var _<#=property.Name#>Nodes = node.getElementsByTagName("<#=property.Name#>")[0].getElementsByTagName("<#=itemType.Name#>");
					var _<#=property.Name#>Item;
					for (i = 0; i < _<#=property.Name#>Nodes.length; i++)
					{
						_<#=property.Name#>Item = deserializeNode<#=itemType.Name#>(_<#=property.Name#>Nodes[i]);
						 result.<#=property.Name#>.push(_<#=property.Name#>Item);
					}					
				<#
                    }
					else
					{
				#>
        result.<#=property.Name#> = node.getElementsByTagName("<#=property.Name#>")[0].textContent;
                <#}
				}
			}#>
			return result;
		}

	<#
	}			
	#>
    return {
		<#
			foreach (var type in types)
		{#>
			deserialize<#=type.Name#>: function(xml) {
						var xmlDoc = parseXml(xml);					
						return deserializeNode<#=type.Name#>(xmlDoc);
					},
		<#
		}			
		#>
	}
})();