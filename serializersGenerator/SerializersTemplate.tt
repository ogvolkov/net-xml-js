var netXmlSerializer = (function(){
// initialize cross-browser xml parser
    var parseXml = function() {
        if (typeof window.DOMParser != "undefined") {
            return function(xmlStr) {
                return ( new window.DOMParser() ).parseFromString(xmlStr, "text/xml");
            };
        } else if (typeof window.ActiveXObject != "undefined" &&  new window.ActiveXObject("Microsoft.XMLDOM")) {
            return function(xmlStr) {
                var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = "false";
                xmlDoc.loadXML(xmlStr);
                return xmlDoc;
            };
        } else {
            throw new Error("No XML parser found");
        }
    }();
	<# 
		var types = _typesInfo.Types;
		var deserializePropertyGenerator = new DeserializePropertyGenerator(WriteLine);
		var propertyProcessor = new PropertyProcessor(deserializePropertyGenerator, types);		
			
		foreach (var type in types)
		{#>
	function deserializeNode<#=type.Name#>(node) {				
				var result = {};
			<# 
				foreach(var property in type.GetProperties())
                {
					propertyProcessor.Process(property.Name, property.PropertyType);
				}
			#>
			return result;
		}

	<#
	}			
	#>
    return {
		<#
			foreach (var type in types)
		{#>
			deserialize<#=type.Name#>: function(xml) {
						var xmlDoc = parseXml(xml);					
						return deserializeNode<#=type.Name#>(xmlDoc);
					},
		<#
		}			
		#>
	}
})();